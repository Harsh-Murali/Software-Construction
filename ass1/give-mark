#!/bin/dash

# This program was written by Harsh Murali (z5361547)

# Checks and grades students' assignment
# Runs tests on their latest submission 
# Gives out marks for based on test results


# Check if the correct number of arguments is provided
if [ "$#" -ne 1 ]
then
    echo "usage: give-mark <assignment>" >&2
    exit 1
fi

assignment=$1

# Check if .give directory exists
if [ ! -d ".give" ]
then
    echo "give-mark: .give directory does not exist" >&2
    exit 1
fi

# Check if assignment directory exists
if [ ! -d ".give/$assignment" ]
then
    echo "give-mark: assignment $assignment does not exist" >&2
    exit 1
fi

# Check if automarking file exists
if [ ! -f ".give/$assignment/automarking.txt" ]
then
    echo "give-mark: automarking file for assignment $assignment does not exist" >&2
    exit 1
fi

# Calculate total marks
calculate_total_marks() {
    total=0
    while IFS='|' read -r _ _ _ _ marks
    do
        total=$((total + marks))
    done < ".give/$assignment/automarking.txt"
    echo "$total"
}

# Iterate over each student's submission
for student_dir in .give/"$assignment"/z*
do
    if [ ! -d "$student_dir" ]
    then
        continue
    fi

    zid=$(basename "$student_dir")
    last_submission=$(ls -t "$student_dir" | head -n 1)

    if [ -z "$last_submission" ]
    then
        continue
    fi

    submission_file="$student_dir/$last_submission"
    submission_size=$(stat -c %s "$submission_file")
    submission_date=$(date -r "$submission_file" "+%Y")

    echo "*** Student $zid - submission $last_submission $submission_size bytes @ $submission_date"

    total_marks=0
    passed_tests=0
    failed_tests=0

    # Read and process the automarking file
    while IFS='|' read -r test_label test_args test_stdin test_options test_marks
    do
        [ "${test_label#'#'}" != "$test_label" ] && continue # Skip comments
        [ -z "$test_label" ] && continue # Skip empty lines

        stdout_file=$(mktemp)
        stderr_file=$(mktemp)
        expected_stdout_file=$(mktemp)
        expected_stderr_file=$(mktemp)

        # Run the student's submission with the test
        if [ -n "$test_stdin" ]
        then
            printf "%s" "$test_stdin" | eval "./\"$submission_file\" $test_args" >"$stdout_file" 2>"$stderr_file"
        else
            eval "./\"$submission_file\" $test_args" >"$stdout_file" 2>"$stderr_file"
        fi
        student_exit_status=$?

        # Run the reference solution
        if [ -n "$test_stdin" ]
        then
            printf "%s" "$test_stdin" | eval ".give/\"$assignment\"/solution.sh $test_args" >"$expected_stdout_file" 2>"$expected_stderr_file"
        else
            eval ".give/\"$assignment\"/solution.sh $test_args" >"$expected_stdout_file" 2>"$expected_stderr_file"
        fi
        solution_exit_status=$?

        # Compare outputs
        diff_options="-u"
        if echo "$test_options" | grep -q "b"
        then
            diff_options="$diff_options -B"
        fi
        if echo "$test_options" | grep -q "c"
        then
            diff_options="$diff_options -i"
        fi
        if echo "$test_options" | grep -q "w"
        then
            diff_options="$diff_options -b"
        fi

        if echo "$test_options" | grep -q "d"
        then
            # Remove all characters except [0-9] and \n
            tr -cd '0-9\n' < "$stdout_file" > "${stdout_file}_filtered"
            mv "${stdout_file}_filtered" "$stdout_file"
            tr -cd '0-9\n' < "$expected_stdout_file" > "${expected_stdout_file}_filtered"
            mv "${expected_stdout_file}_filtered" "$expected_stdout_file"
            tr -cd '0-9\n' < "$stderr_file" > "${stderr_file}_filtered"
            mv "${stderr_file}_filtered" "$stderr_file"
            tr -cd '0-9\n' < "$expected_stderr_file" > "${expected_stderr_file}_filtered"
            mv "${expected_stderr_file}_filtered" "$expected_stderr_file"
        fi

        stdout_diff=$(eval "diff $diff_options \"$stdout_file\" \"$expected_stdout_file\"")
        stdout_diff_status=$?
        stderr_diff=$(eval "diff $diff_options \"$stderr_file\" \"$expected_stderr_file\"")
        stderr_diff_status=$?

        missing_newline=false

        if [ "$stdout_diff_status" -eq 0 ] && [ "$stderr_diff_status" -eq 0 ] && [ "$student_exit_status" -eq "$solution_exit_status" ]
        then
            echo "* Test $test_label passed ($test_marks marks)."
            total_marks=$((total_marks + test_marks))
            passed_tests=$((passed_tests + 1))
        else
            echo "* Test $test_label failed."
            failed_tests=$((failed_tests + 1))

            if echo "$stdout_diff" | grep -q '^\\ No newline at end of file'
            then
                echo "Missing newline at end of stdout"
                missing_newline=true
            fi

            if echo "$stderr_diff" | grep -q '^\\ No newline at end of file'
            then
                echo "Missing newline at end of stderr"
                missing_newline=true
            fi

            if ! $missing_newline
            then
                if [ "$stdout_diff_status" -ne 0 ]
                then
                    echo "--- Incorrect stdout of $(wc -c <"$stdout_file") bytes:"
                    cat "$stdout_file"
                    echo ""
                    echo "--- Correct stdout is these $(wc -c <"$expected_stdout_file") bytes:"
                    cat "$expected_stdout_file"
                    echo ""
                fi

                if [ "$stderr_diff_status" -ne 0 ]
                then
                    echo "--- Incorrect stderr of $(wc -c <"$stderr_file") bytes:"
                    cat "$stderr_file"
                    echo ""
                    echo "--- Correct stderr is these $(wc -c <"$expected_stderr_file") bytes:"
                    cat "$expected_stderr_file"
                    echo ""
                fi
            fi

            if [ "$student_exit_status" -ne "$solution_exit_status" ]
            then
                echo "Exit status of $student_exit_status incorrect should be $solution_exit_status"
            fi
        fi

        rm "$stdout_file" "$stderr_file" "$expected_stdout_file" "$expected_stderr_file"
    done < ".give/$assignment/automarking.txt"

    total_possible_marks=$(calculate_total_marks)
    echo "** $passed_tests tests passed, $failed_tests tests failed - mark: $total_marks/$total_possible_marks"
done
