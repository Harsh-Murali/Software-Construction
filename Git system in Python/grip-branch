#!/usr/bin/env python3

import os
import sys
import shutil

# This program was written by Harsh Murali (z5361547)

# This script lists, creates and deletes branches.

def check_grip():
    # Check if .grip directory exists
    if not os.path.exists(".grip"):
        print("grip-branch: error: grip repository directory .grip not found", file=sys.stderr)
        sys.exit(1)

def get_branch():
    # Gets the current branch from .grip/HEAD
    with open(".grip/HEAD", 'r') as head_file:
        return head_file.read().strip()

def check_commit():
    # Check if the first commit has happened
    current_branch = get_branch()
    commit_dir = f".grip/commit_0"
    if not os.path.exists(commit_dir):
        print("grip-branch: error: this command can not be run until after the first commit", file=sys.stderr)
        sys.exit(1)

def list_branch():
    # Alphabetically lists all branches in .grip/branches
    branches_dir = ".grip/branches"
    branches = [name for name in os.listdir(branches_dir) if os.path.isdir(os.path.join(branches_dir, name))]
    for branch in sorted(branches):
        print(branch)

def create(branch_name):
    # Create a new branch by copying the current directory
    current_branch = get_branch()
    new_branch_dir = f".grip/branches/{branch_name}"

    # Check if the branch exists
    if os.path.exists(new_branch_dir):
        print(f"grip-branch: error: branch '{branch_name}' already exists", file=sys.stderr)
        sys.exit(1)

    shutil.copytree(f".grip/branches/{current_branch}", new_branch_dir)

def del_branch(branch_name):
    # Deletes branches except 'trunk' or current branch
    if branch_name == "trunk":
        print("grip-branch: error: can not delete branch 'trunk': default branch", file=sys.stderr)
        sys.exit(1)

    branch_dir = f".grip/branches/{branch_name}"
    if not os.path.exists(branch_dir):
        print(f"grip-branch: error: branch '{branch_name}' doesn't exist", file=sys.stderr)
        sys.exit(1)

    current_branch = get_branch()
    if branch_name == current_branch:
        print(f"grip-branch: error: can not delete branch '{branch_name}' while on it", file=sys.stderr)
        sys.exit(1)

    shutil.rmtree(branch_dir)
    print(f"Deleted branch '{branch_name}'")

def main(args):
    check_grip()

    # Checks command-line arguments
    if len(args) == 0:
        check_commit()
        list_branch()
    elif args[0] == '-d' and len(args) == 2:
        del_branch(args[1])
    elif len(args) == 1:
        create(args[0])
    else:
        print("usage: grip-branch [-d] <branch>", file=sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    main(sys.argv[1:])
