#!/usr/bin/env python3

import os
import sys
import shutil

# This program was written by Harsh Murali (z5361547)

# This script allows users to switch branches 
# or update the working directory

def check_grip():
    # Check if .grip exists
    if not os.path.exists(".grip"):
        print("grip-checkout: error: grip repository directory .grip not found", file=sys.stderr)
        sys.exit(1)

def get_branch():
    # Gets the current branch from .grip/HEAD
    with open(".grip/HEAD", 'r') as head_file:
        return head_file.read().strip()

def clear_directory(exclude_files=None):
    """Clear the working directory, except for the .grip directory and any files in exclude_files."""
    if exclude_files is None:
        exclude_files = []

    # Avoids deleting grip-scripts
    exclude_files.extend(["grip-init", "grip-add", "grip-commit", "grip-checkout", 
                          "grip-branch", "grip-status", "grip-log", "grip-merge", "grip-rm", "grip-show"])

    # Goes over current directory
    for file in os.listdir("."):
        if file != ".grip" and file not in exclude_files:
            file_path = os.path.join(".", file)
            try:
                if os.path.isfile(file_path) or os.path.islink(file_path):
                    # Remove files
                    os.remove(file_path)
                elif os.path.isdir(file_path):
                    # Remove directories
                    shutil.rmtree(file_path)
            except Exception as e:
                print(f"Failed to remove {file}: {e}", file=sys.stderr)

def copy_commit(commit_dir):
    """Copy files from the commit directory to the working directory and return a list of those files."""
    copied_files = []

    # Checks if commit directory exists
    if not os.path.exists(commit_dir):
        return copied_files

    if not os.listdir(commit_dir):
        return copied_files

    # Copies files from commit to working directory
    for root, _, files in os.walk(commit_dir):
        relative_path = os.path.relpath(root, commit_dir)
        if relative_path != ".":
            os.makedirs(relative_path, exist_ok=True)
        for file in files:
            src_file = os.path.join(root, file)
            dest_file = os.path.join(relative_path, file)
            shutil.copy2(src_file, dest_file)
            copied_files.append(os.path.relpath(dest_file, "."))
    return copied_files

def switch_branch(branch_name):
    # Switch to a certain branch
    current_branch = get_branch()
    
    if branch_name == current_branch:
        # If on certain branch, exits
        print(f"Already on '{branch_name}'")
        sys.exit(0)

    branch_dir = f".grip/branches/{branch_name}"
    if not os.path.exists(branch_dir):
        # Checks if branch exists
        print(f"grip-checkout: error: unknown branch '{branch_name}'", file=sys.stderr)
        sys.exit(1)
    
    # Sorts commit directories
    commit_dirs = sorted([d for d in os.listdir(branch_dir) if d.startswith('commit_')],
                         key=lambda x: int(x.split('_')[1]), reverse=True)

    # Copies files from commit to working directory
    expected_files = []
    if commit_dirs:
        latest_commit_dir = os.path.join(branch_dir, commit_dirs[0])
        expected_files = copy_commit(latest_commit_dir)        
    if expected_files:
        # Clears working directory
        clear_directory(expected_files)
    else:
        pass

    # Makes HEAD point to branch
    with open(".grip/HEAD", 'w') as head_file:
        head_file.write(branch_name)

    print(f"Switched to branch '{branch_name}'")

def main(args):
    check_grip()

    if len(args) != 1:
        print("usage: grip-checkout <branch>", file=sys.stderr)
        sys.exit(1)

    branch_name = args[0]
    switch_branch(branch_name)

if __name__ == '__main__':
    main(sys.argv[1:])
