#!/bin/dash

# This program was written by Harsh Murali (z5361547)

# Checks student program for correctness
# Takes assignment name and filename
# It tests assingments using test labels, arguments, inputs and options
# Comments are ignored(#)

# Check the number of arguments
if [ "$#" -ne 2 ]
then
    echo "usage: give-autotest <assignment> <filename>" >&2
    exit 1
fi

assignment="$1"
program_file="$2"

# Validate the assignment name
if ! echo "$assignment" | grep -Eq "^[a-z][a-zA-Z0-9_]*$"
then
    echo "give-autotest: invalid assignment: $assignment" >&2
    exit 1
fi

# Validate the program file
if ! echo "$program_file" | grep -Eq '^[a-zA-Z0-9_.-/]+$'
then
    echo "give-autotest: invalid filename: $program_file" >&2
    exit 1
fi

assignment_dir=".give/$assignment"
autotest_file="$assignment_dir/autotests.txt"
solution_file="$assignment_dir/solution.sh"

# Check if the assignment directory and autotest file exist
if [ ! -d "$assignment_dir" ]
then
    echo "give-autotest: assignment $assignment not found" >&2
    exit 1
fi

if [ ! -f "$autotest_file" ]
then
    echo "give-autotest: autotests.txt not found in $assignment" >&2
    exit 1
fi

# Check if the program file exists
if [ ! -f "$program_file" ]
then
    echo "give-autotest: $program_file: No such file or directory" >&2
    exit 1
fi

# Check if the solution file exists
if [ ! -f "$solution_file" ]
then
    echo "give-autotest: solution.sh not found in $assignment" >&2
    exit 1
fi

# Function to run a test and compare output
run_test() {
    label="$1"
    args="$2"
    stdin="$3"
    options="$4"

    stdout_file=$(mktemp)
    stderr_file=$(mktemp)
    expected_stdout_file=$(mktemp)
    expected_stderr_file=$(mktemp)

    # Prepare the input for the student's program
    if [ -n "$stdin" ]
    then
        eval "printf \"%s\" \"$stdin\" | ./$program_file $args >\"$stdout_file\" 2>\"$stderr_file\""
    else
        eval "./$program_file $args >\"$stdout_file\" 2>\"$stderr_file\""
    fi
    student_exit_status=$?

    # Prepare the input for the solution program
    if [ -n "$stdin" ]
    then
        eval "printf \"%s\" \"$stdin\" | ./$solution_file $args >\"$expected_stdout_file\" 2>\"$expected_stderr_file\""
    else
        eval "./$solution_file $args >\"$expected_stdout_file\" 2>\"$expected_stderr_file\""
    fi
    solution_exit_status=$?

    # Ensure files end with a newline if missing
    for file in "$stdout_file" "$expected_stdout_file" "$stderr_file" "$expected_stderr_file"
    do
        tail -c1 "$file" | read -r _ || echo >> "$file"
    done

    # Compare the outputs based on options
    compare_outputs "$stdout_file" "$expected_stdout_file" "$stderr_file" "$expected_stderr_file" "$student_exit_status" "$solution_exit_status" "$options" "$label"
    result=$?

    rm "$stdout_file" "$stderr_file" "$expected_stdout_file" "$expected_stderr_file"

    return $result
}

# Function to compare the outputs
compare_outputs() {
    stdout="$1"
    expected_stdout="$2"
    stderr="$3"
    expected_stderr="$4"
    student_exit_status="$5"
    solution_exit_status="$6"
    options="$7"
    label="$8"

    compare_command="diff -u"

    if echo "$options" | grep -q "b"
    then
        compare_command="$compare_command -B"
    fi
    if echo "$options" | grep -q "c"
    then
        compare_command="$compare_command -i"
    fi
    if echo "$options" | grep -q "d"
    then
        # Preprocess outputs to remove characters other than [0-9] and \n
        tr -cd '0-9\n' < "$stdout" > "${stdout}_filtered"
        mv "${stdout}_filtered" "$stdout"
        tr -cd '0-9\n' < "$expected_stdout" > "${expected_stdout}_filtered"
        mv "${expected_stdout}_filtered" "$expected_stdout"
        tr -cd '0-9\n' < "$stderr" > "${stderr}_filtered"
        mv "${stderr}_filtered" "$stderr"
        tr -cd '0-9\n' < "$expected_stderr" > "${expected_stderr}_filtered"
        mv "${expected_stderr}_filtered" "$expected_stderr"
    fi
    if echo "$options" | grep -q "w"
    then
        compare_command="$compare_command -b"
    fi

    # Compare stdout
    stdout_diff=$($compare_command "$stdout" "$expected_stdout")
    stdout_diff_status=$?
    stdout_size=$(stat -c%s "$stdout")

    # Compare stderr
    stderr_diff=$($compare_command "$stderr" "$expected_stderr")
    stderr_diff_status=$?
    stderr_size=$(stat -c%s "$stderr")

    # Compare exit statuses
    if [ "$student_exit_status" -ne "$solution_exit_status" ]
    then
        exit_status_diff_status=1
        exit_status_diff="Exit status of $student_exit_status incorrect should be $solution_exit_status"
    else
        exit_status_diff_status=0
        exit_status_diff=""
    fi

    # Collect the differences
    output=""
    missing_newline=false

    if echo "$stdout_diff" | grep -q '^\\ No newline at end of file'
    then
        output="$output  Missing newline at end of stdout\n"
        missing_newline=true
    fi

    if echo "$stderr_diff" | grep -q '^\\ No newline at end of file'
    then
        output="$output  Missing newline at end of stderr\n"
        missing_newline=true
    fi

    if [ "$stdout_diff_status" -ne 0 ] && [ "$missing_newline" = false ]
    then
        output="$output--- Incorrect stdout of $stdout_size bytes:\n$(cat "$stdout")\n\n"
        output="$output--- Correct stdout is these ${stdout_size} bytes:\n$(cat "$expected_stdout")\n\n"
    fi

    if [ "$stderr_diff_status" -ne 0 ] && [ "$missing_newline" = false ]
    then
        output="$output--- Incorrect stderr of $stderr_size bytes:\n$(cat "$stderr")\n\n"
        output="$output--- Correct stderr is these ${stderr_size} bytes:\n$(cat "$expected_stderr")\n\n"
    fi

    if [ "$exit_status_diff_status" -ne 0 ]
    then
        output="$output$exit_status_diff\n"
    fi

    # Output the differences only if there are any
    if [ -n "$output" ]
    then
        printf "* Test %s failed.\n" "$label"
        printf "%b" "$output"
        return 1
    else
        printf "* Test %s passed.\n" "$label"
        return 0
    fi
}

# Read and run the tests from the autotest file
total_tests=0
passed_tests=0
failed_tests=0

while IFS='|' read -r label args stdin options
do
    # Skip comments and empty lines
    if [ -z "$label" ] || [ "${label#'#'}" != "$label" ]
    then
        continue
    fi

    total_tests=$((total_tests + 1))
    if run_test "$label" "$args" "$stdin" "$options"
    then
        passed_tests=$((passed_tests + 1))
    else
        failed_tests=$((failed_tests + 1))
    fi
done < "$autotest_file"

# Output the summary
summary="** $passed_tests tests passed, $failed_tests tests failed"
printf "%b\n" "$summary"

exit 0
